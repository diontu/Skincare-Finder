{"version":3,"sources":["redux/actions/products-actions.js","components/Loading.js","App.js","redux/actions/constants.js","serviceWorker.js","redux/reducers/fetched-products-reducer.js","redux/reducers/all-reducers.js","redux/store.js","index.js"],"names":["path","require","axios","config","override","css","Loading","props","loading","useSelector","state","receive_products","size","color","mapDispatch","fetch","dispatch","type","get","join","String","process","DOMAIN_NAME","then","prods","payload","_fetchedProducts","catch","err","console","log","connect","fetchActionCreator","useEffect","products","hasFetchedProducts","className","Boolean","window","location","hostname","match","allReducers","combineReducers","action","logger","createLogger","middleware","applyMiddleware","thunk","createStore","reducers","ReactDOM","render","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mPAEMA,EAAOC,EAAQ,IACfC,EAAQD,EAAQ,IAEtBA,EAAQ,IAAUE,OAAO,CAACH,KAAM,qBAEhC,I,uLCFA,IAAMI,EAAWC,cAAH,KAuBCC,MAhBf,SAAiBC,GAEb,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAKA,EAAMC,oBAE5C,OACI,6BACI,kBAAC,IAAD,CACIN,IAAKD,EACLQ,KAAM,GACNC,MAAO,UACPL,QAASA,MCRnBM,EAAc,CAClBC,MFKmB,WACjB,OAAO,SAASC,GAGZ,OAFAA,EAdG,CACHC,KGTa,UHwBNf,EAAMgB,IAAIlB,EAAKmB,KAAKC,OAAOC,mHAAYC,aAAc,WAAY,YACnEC,MAAK,SAAAC,GACFR,EAbS,SAACQ,GACtB,MAAO,CACHP,KGde,UHefQ,QAASD,GAUQE,CAAiBF,OAE7BG,OAAM,SAAAC,GACHC,QAAQC,IAAIF,SEGbG,kBAAQ,KAAMjB,EAAdiB,EAdf,SAAaxB,GAVI,IAACyB,EAiBhB,OAjBgBA,EAYPzB,EAAMQ,MAXfkB,qBAAU,WACRD,MACC,IAWcvB,aAAY,SAAAC,GAAK,OAAIA,EAAMwB,YAC3BzB,aAAY,SAAAC,GAAK,OAAIA,EAAMyB,sBAG1C,yBAAKC,UAAU,OAAf,OADiB,kBAAC,EAAD,SEbDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBC,I,OCOQC,EALKC,YAAgB,CAChCR,mBDH2B,WAA4B,IAA3BzB,EAA0B,wDAAXkC,EAAW,uCACtD,OAAQA,EAAO3B,MACX,IFJa,QEKT,OAAO,EACX,IFLe,UEMX,OAAO,EACX,QACI,OAAOP,ICHfwB,SDOoB,WAAyB,IAAxBxB,EAAuB,uDAAf,GAAIkC,EAAW,uCAC5C,OAAQA,EAAO3B,MACX,IFde,UEeX,OAAO2B,EAAOnB,QAClB,QACI,OAAOf,M,gBEbbmC,EAASC,yBAETC,EAAaC,YAAgBC,IAAOJ,GAE3BK,cAAYC,EAAUJ,GCArCK,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAoC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.d7bf58f6.chunk.js","sourcesContent":["import {FETCH, FETCHED} from './constants';\r\n\r\nconst path = require('path');\r\nconst axios = require('axios');\r\n\r\nrequire('dotenv').config({path: '../../../../.env'});\r\n\r\nconst _fetchProducts = () => {\r\n    return {\r\n        type: FETCH\r\n    };\r\n};\r\n\r\nconst _fetchedProducts = (prods) => {\r\n    return {\r\n        type: FETCHED,\r\n        payload: prods\r\n    };\r\n};\r\n\r\nexport const fetch = () => {\r\n    return function(dispatch) {\r\n        dispatch(_fetchProducts());\r\n\r\n        return axios.get(path.join(String(process.env.DOMAIN_NAME), 'products', 'sephora'))\r\n            .then(prods => {\r\n                dispatch(_fetchedProducts(prods));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    };\r\n};","import React , {useState} from 'react';\r\nimport { css } from '@emotion/core';\r\nimport BeatLoader from 'react-spinners/BeatLoader';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst override = css `\r\n    display: block;\r\n    margin: auto;\r\n    position: absolute;\r\n    top: 50%;\r\n`;\r\n\r\nfunction Loading(props) {\r\n\r\n    const loading = useSelector(state => !state.receive_products);\r\n\r\n    return (\r\n        <div>\r\n            <BeatLoader\r\n                css={override}\r\n                size={35}\r\n                color={\"#227766\"}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading; ","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useSelector } from 'react-redux';\nimport { fetch } from './redux/actions/products-actions';\nimport { connect } from 'react-redux';\n\nimport Loading from './components/Loading';\n\nconst useFetch = (fetchActionCreator) => {\n  useEffect(() => {\n    fetchActionCreator();\n  }, []);\n};\n\nconst mapDispatch = {\n  fetch\n};\n\nfunction App(props) {\n\n  useFetch(props.fetch);\n\n  const products = useSelector(state => state.products); // takes the products from the state\n  const isLoaded = useSelector(state => state.hasFetchedProducts); // gets the state of the \n\n  return !isLoaded ? <Loading/> : (\n    <div className=\"App\">\n      dcc\n    </div>\n  );\n}\n\nexport default connect(null, mapDispatch)(App);\n\n\n// for a class component\n\n// const mapStateToProps = (state) => {\n//   return {\n//     state,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     fetchProds: () => {\n//       dispatch(fetchProducts());\n//     }\n//   };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const FETCH = 'FETCH';\r\nexport const FETCHED = 'FETCHED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FETCH, FETCHED} from '../actions/constants';\r\n\r\nexport const fetchedProducts = (state = false, action) => {\r\n    switch (action.type) {\r\n        case FETCH:\r\n            return false;\r\n        case FETCHED: \r\n            return true;\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport const products = (state = [], action) => {\r\n    switch (action.type) {\r\n        case FETCHED: \r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n};","import { fetchedProducts, products} from './fetched-products-reducer';\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    hasFetchedProducts: fetchedProducts,\r\n    products,\r\n});\r\n\r\nexport default allReducers;","import reducers from './reducers/all-reducers';\r\nimport { createStore , applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst logger = createLogger();\r\n\r\nconst middleware = applyMiddleware(thunk, logger);\r\n\r\nexport default createStore(reducers, middleware);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}