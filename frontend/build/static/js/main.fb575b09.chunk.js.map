{"version":3,"sources":["redux/actions/products-actions.js","redux/actions/constants.js","components/Loading.js","components/title-bar.js","redux/reducers/all-reducers.js","redux/reducers/fetched-products-reducer.js","redux/store.js","models/services/services.js","components/search-bar.js","components/product-card.js","components/toggle-filter-bar.js","routes/home/Home.js","routes/product/Product.js","routes/contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["path","require","axios","config","updateSearchResults","results","type","payload","override","css","Loading","props","loading","useSelector","state","receive_products","size","color","TitleBar","className","to","allReducers","combineReducers","hasFetchedProducts","action","products","normalSearch","careSearch","searchValues","searchResults","loadedSearchResults","productsIngredients","fetchingIngredients","logger","createLogger","middleware","applyMiddleware","thunk","store","createStore","reducers","sendEmail","name","email","message","dispatch","domainName","process","DOMAIN_NAME","defaults","baseURL","String","console","log","a","post","join","then","res","catch","err","sendEmailAction","SearchBar","searchFocused","inputRef","createRef","searchInFocus","bind","searchNotInFocus","_handleKeyDownOrButtonPress","this","setState","event","key","updateSearch","target","value","current","blur","matchWithProductIngredients","matchWithProductName","ref","placeholder","onFocus","onBlur","onKeyDown","React","Component","connect","searchVal","getState","data","forEach","product","productName","brandName","starRatings","image","skuId","targetUrl","regex","RegExp","match","push","productIngredients","ingredients","ingredient","matches","length","matchSearchValuesWithIngredients","ProductCard","productInfo","BASE_SEPHORA_DOMAIN","imageFullURL","src","alt","toggleSearch","onClick","Home","map","Product","Contact","focusedName","focusedEmail","focusedMessage","nameNotInFocus","nameInFocus","emailNotInFocus","emailInFocus","messageNotInFocus","messageInFocus","submitEmail","dispatchSendEmail","onChange","info","fetchProdsInitial","get","prods","_fetchedProducts","fetchInitial","fetchIngredients","_fetchedIngredients","findAllProductsWithIngredients","useEffect","isLoadedProducts","isLoadingIngredients","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.fb575b09.chunk.js","sourcesContent":["import {FETCH, FETCHED, TOGGLE, UPDATESEARCH, UPDATESEARCHRESULTS, SEARCHLOADED, SEARCHNOTLOADED, FETCHINGREDIENTS, FETCHEDINGREDIENTS} from './constants';\r\n\r\nconst path = require('path');\r\nconst axios = require('axios');\r\n\r\nrequire('dotenv').config({path: '../../../../.env'});\r\n\r\n//TODO: following is used for development\r\n// var domainName = process.env.REACT_APP_DOMAIN_NAME;\r\n\r\n//TODO: uncomment when use for production\r\n// var DOMAIN_NAME = process.env.DOMAIN_NAME;\r\n\r\n// if (typeof domainName === 'undefined') {\r\n//     domainName = process.env.DOMAIN_NAME;\r\n// }\r\n// axios.defaults.baseURL = String(domainName);\r\n\r\nconst _fetchProducts = () => {\r\n    return {\r\n        type: FETCH\r\n    };\r\n};\r\n\r\nconst _fetchedProducts = (prods) => {\r\n    return {\r\n        type: FETCHED,\r\n        payload: prods\r\n    };\r\n};\r\n\r\nexport const fetchInitial = () => {\r\n\r\n    var domainName = process.env.REACT_APP_DOMAIN_NAME;\r\n\r\n    if (typeof domainName === 'undefined') {\r\n        domainName = process.env.DOMAIN_NAME;\r\n    }\r\n    axios.defaults.baseURL = String(domainName);\r\n\r\n    return function(dispatch) {\r\n        dispatch(_fetchProducts());\r\n\r\n        return axios.get(path.join('products', 'sephora'))\r\n            .then(prods => {\r\n                dispatch(_fetchedProducts(prods));\r\n                dispatch(updateSearchResults(prods.data));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    };\r\n};\r\n\r\nexport const toggleSearch = () => {\r\n    return {\r\n        type: TOGGLE\r\n    };\r\n};\r\n\r\n//@param searchValue - must be an array of the search values\r\nexport const updateSearchValue = (searchValue) => {\r\n    return { \r\n        type: UPDATESEARCH,\r\n        payload: searchValue\r\n    };\r\n};\r\n\r\n//@param results - must be an array of strings of the search results. -- NOT USED\r\nexport const updateSearchResults = (results) => {\r\n    return {\r\n        type: UPDATESEARCHRESULTS,\r\n        payload: results\r\n    };\r\n}\r\n\r\nexport const searchLoaded = () => {\r\n    return {\r\n        type: SEARCHLOADED,\r\n    };\r\n}\r\n\r\nexport const searchNotLoaded = () => {\r\n    return {\r\n        type: SEARCHNOTLOADED,\r\n    };\r\n}\r\n\r\nconst _fetchingIngredients = () => {\r\n    return {\r\n        type: FETCHINGREDIENTS,\r\n    };\r\n}\r\n\r\nconst _fetchedIngredients = (productIngredients) => {\r\n    return {\r\n        type: FETCHEDINGREDIENTS,\r\n        payload: productIngredients\r\n    };\r\n}\r\n\r\n// TODO: have this function return an array of object with all the products and which ingredients they match using an array.\r\n// TODO: ONLY update the SEARCHRESULTS if all have matched the ingredients\r\n\r\n\r\n//The above solution requires n times the amount of api calls... not good.\r\n//Another solution is to get all the ingredients from each of the products and compare them here and \r\n//return the results for each of the products.\r\n//cannot pass the array of search values to backend, so might be better to do comparison on frontend\r\nexport const findAllProductsWithIngredients = () => {\r\n    var domainName = process.env.REACT_APP_DOMAIN_NAME;\r\n\r\n    if (typeof domainName === 'undefined') {\r\n        domainName = process.env.DOMAIN_NAME;\r\n    }\r\n    axios.defaults.baseURL = String(domainName);\r\n\r\n    return function(dispatch) {\r\n        //calls the backend \r\n        //SOLUTION: put the initial products into the database and look through the database with the API call based off of skuId\r\n        \r\n        dispatch(_fetchingIngredients());\r\n\r\n        return axios.get(path.join('products', 'sephora', 'ingredients', 'all'))\r\n            .then(productIngredients => {\r\n                dispatch(_fetchedIngredients(productIngredients));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n        //update the search results with _updateSearchResults at services.js\r\n    };\r\n}\r\n\r\nexport const sendEmailAction = ({name, email, message}) => {\r\n    //here is where i make the axios post call\r\n    var domainName = process.env.REACT_APP_DOMAIN_NAME;\r\n\r\n    if (typeof domainName === 'undefined') {\r\n        domainName = process.env.DOMAIN_NAME;\r\n    }\r\n    axios.defaults.baseURL = String(domainName);\r\n\r\n    console.log('entered email');\r\n\r\n    return async dispatch => {\r\n        // set the state of SENDINGEMAIL to true and use this state to load the loading overlay\r\n        await axios.post(path.join('contact', 'send'), {name, email, message})\r\n            .then((res) => {\r\n                console.log('entered req');\r\n            })\r\n            .catch((err) => {\r\n\r\n            });\r\n    };\r\n};","export const FETCH = 'FETCH';\r\nexport const FETCHED = 'FETCHED';\r\nexport const TOGGLE = 'TOGGLE';\r\nexport const UPDATESEARCH = 'UPDATESEARCH';\r\nexport const UPDATESEARCHRESULTS = 'UPDATESEARCHRESULTS';\r\nexport const SEARCHLOADED = 'SEARCHLOADED';\r\nexport const SEARCHNOTLOADED = 'SEARCHNOTLOADED';\r\nexport const FETCHINGREDIENTS = 'FETCHINGREDIENTS';\r\nexport const FETCHEDINGREDIENTS = 'FETCHEDINGREDIENTS';","import React , {useState} from 'react';\r\nimport { css } from '@emotion/core';\r\nimport BeatLoader from 'react-spinners/BeatLoader';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst override = css `\r\n    display: block;\r\n    margin: auto;\r\n    position: absolute;\r\n    top: 50%;\r\n`;\r\n\r\nfunction Loading(props) {\r\n\r\n    const loading = useSelector(state => !state.receive_products);\r\n\r\n    return (\r\n        <div>\r\n            <BeatLoader\r\n                css={override}\r\n                size={35}\r\n                color={\"#227766\"}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading; ","import React from 'react';\r\nimport '../styles.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction TitleBar() {\r\n    return(\r\n        <div className=\"title-bar\">\r\n            <Link className=\"header-title\" to=\"/\">Skincare-Finder</Link>\r\n            <div className=\"header-links-right\">\r\n                <Link className=\"header-link\" to=\"/contact\">Contact</Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TitleBar;","import { fetchedProducts, products, normalSearch, careSearch, searchValues, searchResults, loadedSearchResults, productsIngredients, fetchingIngredients } from './fetched-products-reducer';\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    hasFetchedProducts: fetchedProducts,\r\n    products,\r\n    normalSearch,\r\n    careSearch,\r\n    searchValues,\r\n    searchResults, \r\n    loadedSearchResults,\r\n    productsIngredients,\r\n    fetchingIngredients\r\n});\r\n\r\nexport default allReducers;","import {FETCH, FETCHED, TOGGLE, UPDATESEARCH, UPDATESEARCHRESULTS, SEARCHLOADED, SEARCHNOTLOADED, FETCHINGREDIENTS, FETCHEDINGREDIENTS} from '../actions/constants';\r\n\r\nexport const fetchedProducts = (state = false, action) => {\r\n    switch (action.type) {\r\n        case FETCH:\r\n            return false;\r\n        case FETCHED: \r\n            return true;\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport const products = (state = [], action) => {\r\n    switch (action.type) {\r\n        case FETCHED: \r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport const normalSearch = (state = true, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE:\r\n            return !state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const careSearch = (state = false, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE:\r\n            return !state;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const searchValues = (state = [], action) => {\r\n    switch (action.type) {\r\n        case UPDATESEARCH:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const searchResults = (state = [], action) => {\r\n    switch (action.type) {\r\n        case UPDATESEARCHRESULTS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const loadedSearchResults = (state = true, action) => {\r\n    switch (action.type) {\r\n        case SEARCHLOADED: \r\n            return true;\r\n        case SEARCHNOTLOADED:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const productsIngredients = (state = [], action) => {\r\n    switch (action.type) {\r\n        case FETCHEDINGREDIENTS:\r\n            return action.payload;\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport const fetchingIngredients = (state = false, action) => {\r\n    switch (action.type) {\r\n        case FETCHINGREDIENTS:\r\n            return true;\r\n        case FETCHEDINGREDIENTS:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n}","import reducers from './reducers/all-reducers';\r\nimport { createStore , applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst logger = createLogger();\r\n\r\nconst middleware = applyMiddleware(thunk, logger);\r\n\r\nconst store = createStore(reducers, middleware);\r\n\r\nexport default store;","import {searchLoaded, searchNotLoaded, updateSearchResults, sendEmailAction} from './../../redux/actions/products-actions';\r\nimport store from './../../redux/store';\r\n\r\n//all these services are redux-actions.\r\n\r\nexport const matchSearchValuesWithProductName = () => {\r\n    // let searchVal = store.getState().searchValues[0]; // if searching for only the productname, then it's the first index of the array\r\n\r\n    return dispatch => {\r\n        dispatch(searchNotLoaded());\r\n\r\n        let searchVal = store.getState().searchValues[0];\r\n\r\n        let searchResults = [];\r\n\r\n        let products = store.getState().products;\r\n        console.log(products);\r\n\r\n        products.data.forEach((product) => {\r\n            let data = {\r\n                productName: product.productName,\r\n                brandName: product.brandName,\r\n                starRatings: product.starRatings,\r\n                image: product.image,\r\n                skuId: product.skuId,\r\n                targetUrl: product.targetUrl,\r\n                // matched: false\r\n            };\r\n\r\n            let regex = new RegExp(searchVal, 'i');\r\n\r\n            if (product.productName.match(regex)) {\r\n                // data.matched = true;\r\n                searchResults.push(data);\r\n            }\r\n        });\r\n\r\n\r\n\r\n        dispatch(updateSearchResults(searchResults));\r\n        dispatch(searchLoaded());\r\n    };\r\n};\r\n\r\nexport const matchSearchValuesWithIngredients = () => {\r\n\r\n    let searchValues = store.getState().searchValues;\r\n\r\n    return dispatch => {\r\n        dispatch(searchNotLoaded());\r\n\r\n        let searchResults = [];\r\n\r\n        let productsIngredients = store.getState().productsIngredients;\r\n        productsIngredients.data.forEach((productIngredients) => {\r\n            let data = {\r\n                productName: productIngredients.productName,\r\n                brandName: productIngredients.brandName,\r\n                starRatings: productIngredients.starRatings,\r\n                image: productIngredients.image,\r\n                skuId: productIngredients.skuId,\r\n                targetUrl: productIngredients.targetUrl,\r\n            };\r\n            data.matches = [];\r\n\r\n            productIngredients.ingredients.forEach((ingredient) => {\r\n                searchValues.forEach((searchVal) => {\r\n                    let regex = new RegExp(searchVal, 'i');\r\n                    if (ingredient.match(regex)) {\r\n                        data.matches.push(ingredient);\r\n                    }\r\n                });\r\n            })\r\n            if (data.matches.length != 0)  {\r\n                searchResults.push(data);\r\n            }\r\n        });\r\n\r\n        dispatch(updateSearchResults(searchResults));\r\n        dispatch(searchLoaded());\r\n    };\r\n};\r\n\r\nexport const sendEmail = ({name, email, message}) => {\r\n    return dispatch => {\r\n        dispatch(sendEmailAction({name, email, message}));\r\n    };\r\n};","import React, { createRef } from 'react';\r\nimport '../styles.css';\r\nimport { connect } from 'react-redux';\r\nimport { toggleSearch, updateSearchValue } from '../redux/actions/products-actions';\r\nimport { matchSearchValuesWithProductName, matchSearchValuesWithIngredients } from '../models/services/services';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ...this.props.state,\r\n            searchFocused: false,\r\n            inputRef: createRef()\r\n        };\r\n        this.searchInFocus = this.searchInFocus.bind(this);\r\n        this.searchNotInFocus = this.searchNotInFocus.bind(this);\r\n        this._handleKeyDownOrButtonPress = this._handleKeyDownOrButtonPress.bind(this);\r\n    }\r\n    \r\n    searchInFocus() {\r\n        this.setState({\r\n            searchFocused: true\r\n        });\r\n    }\r\n\r\n    searchNotInFocus() {\r\n        this.setState({\r\n            searchFocused: false\r\n        });\r\n    }\r\n\r\n    _handleKeyDownOrButtonPress(event) {\r\n        if (event.key === 'Enter') {\r\n\r\n            //should parse the input so that One could input multiple ingredients and filter for them\r\n\r\n            // begin searching using the input from the search bar\r\n            this.props.updateSearch([event.target.value]);\r\n            this.state.inputRef.current.blur();\r\n\r\n            //force rerender\r\n            if (this.props.state.careSearch) {\r\n                //perform a care search\r\n                // perform an action to make an api call on all the targetURL to return the search Results\r\n                this.props.matchWithProductIngredients();\r\n            } \r\n            else {\r\n                //perform a reg search\r\n                this.props.matchWithProductName();\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.state);\r\n        return (\r\n            <div className={this.state.searchFocused? \"search-bar-focused\" : \"search-bar\"}>\r\n                <input className=\"search-bar-input\" \r\n                    ref={this.state.inputRef}\r\n                    type=\"text\" \r\n                    placeholder={this.props.state.careSearch? \"Search Ingredient\" : \"Search Item\"} \r\n                    onFocus={this.searchInFocus} \r\n                    onBlur={this.searchNotInFocus}\r\n                    onKeyDown={this._handleKeyDownOrButtonPress}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        updateSearch: (searchVal) => {\r\n            dispatch(updateSearchValue(searchVal));\r\n        },\r\n        matchWithProductName: () => {\r\n            dispatch(matchSearchValuesWithProductName());\r\n        },\r\n        matchWithProductIngredients: () => {\r\n            dispatch(matchSearchValuesWithIngredients());\r\n        }  \r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","import React from 'react';\r\nimport './../styles.css';\r\nimport FadeIn from 'react-fade-in';\r\n\r\nconst path = require('path');\r\n\r\nrequire('dotenv').config({path: '../.env'});\r\n\r\nfunction ProductCard({productInfo}) {\r\n\r\n    var baseURL = process.env.REACT_APP_SEPHORA_DOMAIN;\r\n    if (typeof baseURL === 'undefined') {\r\n        baseURL = process.env.BASE_SEPHORA_DOMAIN;\r\n    }\r\n\r\n    const imageFullURL = path.join(String(baseURL), String(productInfo.image));\r\n\r\n    //TODO: have stars for the ratings and change the color of the links\r\n    //TODO: have the items actually filter the items \r\n    //TODO: when user wants to look for ingredient, they have to press a button to make an api call to look for the ingredient \r\n    //TODO: \r\n    //TODO: if no products fits all the ingredients, find and suggest products with at least few of those ingredients\r\n    //TODO: filter for the ingredients WITHOUT that doesn't contain SPECIFIC ingredients\r\n    return (\r\n        <FadeIn>\r\n            <div className=\"product\">\r\n                <div className=\"product-image\">\r\n                    <img src={imageFullURL} alt={productInfo.productName + ' image'}/>\r\n                </div>\r\n                <div className=\"product-descr\">{productInfo.productName}</div>\r\n                <div className=\"product-brand\">{productInfo.brandName}</div>\r\n                <div className=\"product-ratings\">Ratings + Amount of Ratings</div>\r\n            </div>\r\n        </FadeIn>\r\n    );\r\n}\r\n\r\nexport default ProductCard;","import React from 'react';\r\nimport \"./../styles.css\";\r\nimport {connect, useSelector} from 'react-redux';\r\nimport {toggleSearch} from './../redux/actions/products-actions';\r\n\r\n\r\nfunction ToggleFilterBar(props) {\r\n\r\n    const normalSearch = useSelector((state) => state.normalSearch);\r\n    const careSearch = useSelector((state) => state.careSearch);\r\n\r\n    function toggleTheSearch(event) {\r\n        props.toggleSearch();\r\n    }\r\n\r\n    return(\r\n        <div className=\"center\">\r\n            <label className=\"switch\">\r\n                <input type=\"checkbox\" onClick={toggleTheSearch}/>\r\n                <span className=\"slider round\"></span>\r\n            </label>\r\n            <div>Ingredient Search</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction mapDispatchToProp(dispatch) {\r\n    return({\r\n        toggleSearch: () => {\r\n            dispatch(toggleSearch());\r\n        }\r\n    });\r\n}\r\n\r\nexport default connect(null, mapDispatchToProp)(ToggleFilterBar);","import React, { useState} from 'react';\r\nimport '../../styles.css';\r\nimport { connect } from 'react-redux';\r\nimport {Link} from 'react-router-dom';\r\nimport Loading from './../../components/Loading';\r\n\r\nimport SearchBar from './../../components/search-bar';\r\nimport ProductCard from './../../components/product-card';\r\nimport ToggleFilterBar from './../../components/toggle-filter-bar';\r\nimport FadeIn from 'react-fade-in';\r\n\r\nconst path = require('path');\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    //forces a re-render after an change in state occurs\r\n    componentDidUpdate() {\r\n        this.setState();\r\n    }\r\n\r\n    // --------------------- 1.  must get the fade in after each search -----------------------------\r\n    // --------------------- 2.  get the ingredient search working (rn shows all the ingredients) ------------------------------------\r\n    render() {\r\n        return(\r\n            <div className=\"body\">\r\n                <h1>Find the right Skincare Product for you</h1>\r\n                <ToggleFilterBar />\r\n                <SearchBar />\r\n                {!this.props.state.loadedSearchResults? <Loading/> : ( \r\n                    <div className=\"products-body\">\r\n                        {this.props.state.searchResults.map(product => (\r\n                            <div className=\"space-inbetween\">\r\n                                <Link to={'/product/' + product.skuId} className=\"no-text-dec\"><ProductCard productInfo={product}/></Link>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        state\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Home);","import React from 'react';\r\nimport '../../styles.css';\r\n\r\nfunction Product() {\r\n    return(\r\n        <div className=\"body\">\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Product;","import React from 'react';\r\nimport '../../styles.css';\r\nimport FadeIn from 'react-fade-in';\r\nimport { connect } from 'react-redux';\r\nimport { sendEmail } from './../../models/services/services';\r\n\r\nclass Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            focusedName: false,\r\n            focusedEmail: false,\r\n            focusedMessage: false,\r\n            name: '',\r\n            email: '',\r\n            message: ''\r\n        };\r\n        //these binds to the class allows me to use component methods such as setState() within the made method.\r\n        this.nameNotInFocus = this.nameNotInFocus.bind(this);\r\n        this.nameInFocus = this.nameInFocus.bind(this);\r\n        this.emailNotInFocus = this.emailNotInFocus.bind(this);\r\n        this.emailInFocus = this.emailInFocus.bind(this);\r\n        this.messageNotInFocus = this.messageNotInFocus.bind(this);\r\n        this.messageInFocus = this.messageInFocus.bind(this); \r\n        this.submitEmail = this.submitEmail.bind(this);\r\n    }\r\n\r\n    nameNotInFocus() {\r\n        this.setState({\r\n            focusedName: false\r\n        });\r\n    }\r\n\r\n    nameInFocus() {\r\n        this.setState({\r\n            focusedName: true\r\n        });\r\n    }\r\n\r\n    emailNotInFocus() {\r\n        this.setState({\r\n            focusedEmail: false\r\n        });\r\n    }\r\n\r\n    emailInFocus() {\r\n        this.setState({\r\n            focusedEmail: true\r\n        });\r\n    }\r\n\r\n    messageNotInFocus() {\r\n        this.setState({\r\n            focusedMessage: false\r\n        });\r\n    }\r\n\r\n    messageInFocus() {\r\n        this.setState({\r\n            focusedMessage: true\r\n        });\r\n    }\r\n\r\n    submitEmail() {\r\n\r\n        //send the info and etc. to the backend with an axios call\r\n        const name = this.state.name;\r\n        const email = this.state.email;\r\n        const message = this.state.message;\r\n        this.props.dispatchSendEmail({\r\n            name,\r\n            email,\r\n            message\r\n        });\r\n\r\n        this.setState({\r\n            focusedName: false,\r\n            focusedEmail: false,\r\n            focusedMessage: false,\r\n            name: '',\r\n            email: '',\r\n            message: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"body\">\r\n                <FadeIn>\r\n                    <h1>Contact</h1>\r\n                    <p><em>If there are any problems with the website or design flaws, please contact me by filling out the contact information below.</em></p>\r\n                    <div className={this.state.focusedName? \"focused-box\" : \"not-focused-box\"}>\r\n                        <input className=\"box-input\" \r\n                            type=\"text\" \r\n                            placeholder=\"Name\"\r\n                            value={this.state.name}\r\n                            onFocus={this.nameInFocus}\r\n                            onBlur={this.nameNotInFocus}\r\n                            onChange={event => this.setState({name: event.target.value})}\r\n                        />\r\n                    </div>\r\n                    <div className={this.state.focusedEmail? \"focused-box\" : \"not-focused-box\"}>\r\n                        <input className=\"box-input\" \r\n                            type=\"text\"\r\n                            placeholder=\"Email\"\r\n                            value={this.state.email}\r\n                            onFocus={this.emailInFocus}\r\n                            onBlur={this.emailNotInFocus}\r\n                            onChange={event => this.setState({email: event.target.value})}\r\n                        />\r\n                    </div>\r\n                    <div className={this.state.focusedMessage? \"focused-box\" : \"not-focused-box\"}>\r\n                        <textarea className=\"message-box-input\"\r\n                            placeholder=\"Message\"\r\n                            value={this.state.message}\r\n                            onFocus={this.messageInFocus}\r\n                            onBlur={this.messageNotInFocus}\r\n                            onChange={event => this.setState({message: event.target.value})}\r\n                        />\r\n                    </div>\r\n                    <button onClick={this.submitEmail}>Submit</button>\r\n                </FadeIn>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatchSendEmail: (info) => {\r\n            dispatch(sendEmail(info));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Contact);","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useSelector } from 'react-redux';\nimport { fetchInitial, findAllProductsWithIngredients } from './redux/actions/products-actions';\nimport { connect } from 'react-redux';\n\nimport Loading from './components/Loading';\n\nimport TitleBar from './components/title-bar';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport Home from './routes/home/Home';\nimport Product from './routes/product/Product';\nimport Contact from './routes/contact/Contact';\nimport { matchSearchValuesWithIngredients } from './models/services/services';\n\nfunction App(props) {\n\n  // having the empty array as the second param makes it only run once\n  useEffect(() => {\n    props.fetchProdsInitial();\n    props.fetchIngredients();\n  }, []);\n\n  const isLoadedProducts = useSelector(state => state.hasFetchedProducts); // gets the state of the loader\n  const isLoadingIngredients = useSelector(state => state.fetchingIngredients);\n\n  return !isLoadedProducts || isLoadingIngredients? <Loading/> : (\n    <div>\n      <Router>\n        <TitleBar/>\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/product/:id\" component={Product}/>\n          <Route path=\"/contact\" component={Contact}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n// const mapStateToProps = (state) => {\n//   return {\n//     state,\n//   };\n// };\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchProdsInitial: () => {\n      dispatch(fetchInitial());\n    },\n    fetchIngredients: () => {\n      dispatch(findAllProductsWithIngredients());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}